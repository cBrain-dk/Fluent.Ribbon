<Fluent:RibbonWindow xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                     xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                     xmlns:Fluent="clr-namespace:Fluent;assembly=Fluent"
                     xmlns:FluentTest="clr-namespace:FluentTest"
                     xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
                     xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                     mc:Ignorable="d"
                     x:Name="window"
                     x:Class="FluentTest.TestWindow"
                     Title="{Binding WindowTitle, ElementName=TestContent}"
                     TitleBarHeight="37"
                     FlowDirection="LeftToRight"
                     IsIconVisible="False"
                     MinWidth="80"
                     MinHeight="60"                     
                     WindowState="Maximized"
                     Background="{DynamicResource RibbonWindowBackgroundBrush}"
                     BorderBrush="{DynamicResource RibbonWindowBorderBrush}"
                     NonActiveBorderBrush="{DynamicResource RibbonWindowNonActiveBorderBrush}"
                     GlowBrush="{DynamicResource RibbonWindowGlowBrush}"
                     NonActiveGlowBrush="{DynamicResource RibbonWindowNonActiveGlowBrush}">

    <Fluent:RibbonWindow.Resources>
        <Color x:Key="White">#FFFFFFFF</Color>
        <Color x:Key="Black">#FF000000</Color>
        <Color x:Key="CBrainBlueColor">#FF4697DE</Color>
        <Color x:Key="CBrainLightBlueColor">#FF60B1F8</Color>

        <SolidColorBrush x:Key="RibbonWindowBackgroundBrush" Color="{DynamicResource White}" />
        <SolidColorBrush x:Key="RibbonWindowBorderBrush" Color="{DynamicResource CBrainBlueColor}" />
        <SolidColorBrush x:Key="RibbonWindowNonActiveBorderBrush" Color="{DynamicResource CBrainLightBlueColor}" />
        <SolidColorBrush x:Key="RibbonWindowGlowBrush" Color="{DynamicResource Black}" />
        <SolidColorBrush x:Key="RibbonWindowNonActiveGlowBrush" Color="{DynamicResource Black}" />
        <SolidColorBrush x:Key="RibbonInteractionWindowCommandStrokeBrush" Color="{DynamicResource White}" />

        <DataTemplate x:Key="RibbonWindowHeaderTemplate">
            <Grid x:Name="Header"
                  Margin="10 10 0 0">
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                    <ColumnDefinition Width="*" />
                </Grid.ColumnDefinitions>
                <Image x:Name="HeaderIcon"
                       Grid.Column="0"
                       Margin="0 0 15 4"
                       Height="24"
                       Width="24"
                       Stretch="Fill"
                       StretchDirection="Both"
                       Source="{Fluent:IconConverter {Binding HeaderIconSource, ElementName=TestContent}}" />
                <TextBlock x:Name="TitleText"
                           Margin="0"
                           TextTrimming="CharacterEllipsis"
                           TextWrapping="WrapWithOverflow"
                           Grid.Column="1"
                           Text="{Binding WindowTitle, ElementName=TestContent}" />
            </Grid>
        </DataTemplate>

        <Style TargetType="Fluent:RibbonTitleBar">
            <Setter Property="HeaderAlignment" Value="Center" />
            <Setter Property="HeaderTemplate" Value="{StaticResource RibbonWindowHeaderTemplate}" />
        </Style>

        <Style TargetType="{x:Type Fluent:WindowCommands}" BasedOn="{StaticResource {x:Type Fluent:WindowCommands}}">
            <Setter Property="Foreground" Value="{DynamicResource RibbonInteractionWindowCommandStrokeBrush}" />
        </Style>

        <Style TargetType="{x:Type Fluent:ScreenTip}" BasedOn="{StaticResource {x:Type Fluent:ScreenTip}}">
            <Setter Property="Width" Value="190" />
        </Style>

        <Style TargetType="{x:Type Fluent:SplitButton}" BasedOn="{StaticResource {x:Type Fluent:SplitButton}}">
            <Setter Property="HorizontalContentAlignment" Value="Stretch" />
            <Setter Property="VerticalContentAlignment" Value="Stretch" />
        </Style>
    </Fluent:RibbonWindow.Resources>

    <Fluent:RibbonWindow.LayoutTransform>
        <!-- todo: netcore => was using x:Reference before -->
        <ScaleTransform ScaleX="{Binding DataContext.Zoom, ElementName=TestContent}"
                        ScaleY="{Binding DataContext.Zoom, ElementName=TestContent}" />
    </Fluent:RibbonWindow.LayoutTransform>

    <Grid>
        <FluentTest:TestContent x:Name="TestContent"/>

        <FluentTest:TestCommandBar x:Name="TestBar"
                                Visibility="Collapsed"  />
    </Grid>
</Fluent:RibbonWindow>